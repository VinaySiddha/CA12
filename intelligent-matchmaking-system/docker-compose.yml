# Docker Compose for Intelligent Matchmaking System - Production Ready
version: '3.8'

services:
  # MongoDB Database - Primary storage for users, meetings, discussions, resources
  mongodb:
    image: mongo:7.0
    container_name: matchmaking_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: matchmaking_admin_2024
      MONGO_INITDB_DATABASE: intelligent_matchmaking
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo_setup.js:/docker-entrypoint-initdb.d/mongo_setup.js:ro
    networks:
      - matchmaking_network
    command: mongod --auth

  # Redis - For caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: matchmaking_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass matchmaking_redis_2024
    volumes:
      - redis_data:/data
    networks:
      - matchmaking_network

  # FastAPI Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: matchmaking_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      MONGODB_URL: mongodb://admin:matchmaking_admin_2024@mongodb:27017/intelligent_matchmaking?authSource=admin
      DATABASE_NAME: intelligent_matchmaking
      REDIS_URL: redis://:matchmaking_redis_2024@redis:6379
      
      # Security Configuration
      SECRET_KEY: your_super_secret_key_here_change_in_production_2024
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # CORS Configuration
      ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000,http://localhost:3001
      
      # Email Configuration (Optional - for notifications)
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USERNAME: your_email@gmail.com
      SMTP_PASSWORD: your_app_password
      EMAIL_FROM: your_email@gmail.com
      
      # WebSocket Configuration
      WS_HEARTBEAT_INTERVAL: 30
      WS_TIMEOUT: 60
      
      # File Upload Configuration
      MAX_FILE_SIZE: 52428800  # 50MB in bytes
      ALLOWED_FILE_TYPES: pdf,doc,docx,txt,mp4,avi,mov,jpg,jpeg,png,zip,rar
      
      # Application Settings
      APP_NAME: Intelligent Matchmaking System
      DEBUG: "false"
      LOG_LEVEL: INFO
      
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend:/app
      - uploaded_files:/app/uploads
    networks:
      - matchmaking_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:8000
        REACT_APP_WS_URL: ws://localhost:8000/ws
        REACT_APP_NAME: Intelligent Matchmaking System
    container_name: matchmaking_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # React Environment Variables
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000/ws
      REACT_APP_NAME: Intelligent Matchmaking System
      GENERATE_SOURCEMAP: "false"
      
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - matchmaking_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: matchmaking_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates (if available)
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - matchmaking_network

  # ML Service (Recommendation Engine)
  ml_service:
    build:
      context: ./ml
      dockerfile: Dockerfile
    container_name: matchmaking_ml_service
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      MONGODB_URL: mongodb://admin:matchmaking_admin_2024@mongodb:27017/intelligent_matchmaking?authSource=admin
      REDIS_URL: redis://:matchmaking_redis_2024@redis:6379
      MODEL_PATH: /app/models
      LOG_LEVEL: INFO
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./ml:/app
      - ml_models:/app/models
    networks:
      - matchmaking_network

  # Monitoring - Optional Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: matchmaking_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - matchmaking_network

  # Monitoring - Optional Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: matchmaking_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: matchmaking_grafana_2024
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - matchmaking_network

# Named volumes for persistent data storage
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  uploaded_files:
    driver: local
  ml_models:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  matchmaking_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16